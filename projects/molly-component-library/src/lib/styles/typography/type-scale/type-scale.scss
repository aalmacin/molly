$baseFontSize: 1rem;

$font-sizes: (vl: 2rem,
lg: 1.5rem,
base: $baseFontSize,
sm: 0.875rem);

$measures: (n: 25em,
base: 40em,
w: 50em);

$line-heights: (
  s: 1,
  t: 1.25,
  c: 1.5
);

$tracking: (
  base: .1em,
  t: -.05em,
  m: .25em,
);

$text-transform: (
  u: uppercase,
  l: lowercase,
  c: capitalize,
);

@mixin generate($map, $prefix, $cssRule) {

  @each $name,
  $val in $map {
    .mol-#{$prefix}-#{$name} {
      #{$cssRule}: $val;
    }
  }
}

@mixin generateWithBase($map, $prefix, $cssRule) {

  @each $name,
  $val in $map {
    $className: #{$prefix}-#{$name};

    @if($name==base) {
      $className: #{$prefix}
    }

    .mol-#{$className} {
      #{$cssRule}: $val;
    }
  }
}

@mixin genTypeScale() {
  $prefix: f;
  $cssRule: font-size;

  @include generate($font-sizes, $prefix, $cssRule);
}

@mixin genMeasure() {
  $prefix: mea;
  $cssRule: max-width;

  @include generateWithBase($measures, $prefix, $cssRule);
}

.mol-trunc {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin genLineHeights() {
  $prefix: lh;
  $cssRule: line-height;

  @include generate($line-heights, $prefix, $cssRule);
}

@mixin genTracking() {
  $prefix: tr;
  $cssRule: letter-spacing;

  @include generateWithBase($tracking, $prefix, $cssRule);
}

@mixin genTextTransform() {
  $prefix: tt;
  $cssRule: text-transform;

  @include generate($text-transform, $prefix, $cssRule);
}

@include genTypeScale();
@include genMeasure();
@include genLineHeights();
@include genTracking();
@include genTextTransform();